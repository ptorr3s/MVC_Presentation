@model IList<Task>
@{
	ViewBag.Title = "Tasks";
}

<h1>@ViewBag.Title</h1>

<ol data-bind="foreach: tasks">
	<li>
		<label>
			<input type="checkbox" data-bind="checked: isComplete" />
			<span data-bind="text: title"></span>
		</label>
		<a class="deleteButton" data-bind="click: $parent.removeTask">&nbsp;✗&nbsp;</a>
	</li>
</ol>

<div data-bind="if: incompleteTasks().length > 0">
	 There are <span data-bind="text: incompleteTasks().length"></span> incomplete tasks.
</div>

<hr />

<h2>New Task (#<span data-bind="text: tasks().length + 1"></span>)</h2>
Title: <input type="text" data-bind="value: newTaskTitle" />
<button data-bind="click: addTask">Add</button>

@section scripts {
	<script type="text/javascript">

		// Task service url
		var serviceUrl = "@Url.HttpRouteUrl("DefaultApi", new { controller = "Tasks" })";

		// Define a Task model
		var Task = function (data) {
			var self = this;

			self.id = data.id;
			self.isComplete = ko.observable(data.isComplete);
			self.title = ko.observable(data.title);

			this.update = function() {
				$.ajax({
					type: 'PUT',
					data: ko.mapping.toJSON(self),
					url: serviceUrl,
					contentType: "application/json; charset=utf-8"
				});
			};

			this.delete = function() {
				$.ajax({
					type: 'DELETE',
					url: serviceUrl + "/" + self.id,
					contentType: "application/json; charset=utf-8"
				});
			};

			this.create = function() {
				$.ajax({
					type: 'POST',
					data: ko.mapping.toJSON(self),
					url: serviceUrl,
					contentType: "application/json; charset=utf-8"
				});
			};

			this.isComplete.subscribe(this.update);
			this.title.subscribe(this.update);

		};

		// Define a model for the page
		var TaskPageModel = function (tasks) {
			var self = this;

			// Page properties
			ko.mapping.fromJS({ tasks: tasks }, {
				tasks: {
					create: function(options) {
						return new Task(options.data);
					}
				}
			}, self);
			self.newTaskTitle = ko.observable("");

			// Computed incomplete task list
			this.incompleteTasks = ko.computed(function () {
				return ko.utils.arrayFilter(self.tasks(), function (task) {
					return !task.isComplete();
				});
			});

			self.addTask = function () {
				if (self.newTaskTitle().trim() == "")
					return;

				var newTask = new Task({ id: self.tasks().length + 1, isComplete: false, title: self.newTaskTitle() });
				newTask.create();

				self.tasks.push(newTask);
				self.newTaskTitle("");
			};

			self.removeTask = function (task) {
				task.delete();
				self.tasks.remove(task);
			};

		};


		// Less Fake data
		var taskData = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@Model));

		// Bind the data to the page
		ko.applyBindings(new TaskPageModel(taskData));
	</script>
}